using System;
using DotNetPerformance;

namespace PerfTest.Collections {
	public class ArrayInitialisation {
		private static long _val;
		//TEST 05.03
		[Benchmark("Compares inline vs explict array initialization.")]
		public static TestResultGrp RunTest() {	
			const int numberIterations = 1000000;
			const int numberTestRuns = 5;
			TestRunner tr = new TestRunner(numberIterations, numberTestRuns);
			TestRunner.TestCase testCases = null;
			testCases += new TestRunner.TestCase(ArrayInitialisation.Inline);
			testCases += new TestRunner.TestCase(ArrayInitialisation.Seperate);
			
			return tr.RunTests(testCases);
		}

		public static void Inline(Int32 numberIterations) {
			for (int i = 0;i < numberIterations;++i) {
				long[,] a = new long[,]{{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
									    {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
										{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19}
																			   
									   };
				_val += a[i%10, i%10]; 
			}
		}

		public static void Seperate(Int32 numberIterations) {
			for (int i = 0;i < numberIterations;++i) {
				long[,] a = new long[20,20];
				a[0,0] = 0; a[0,1] = 1; a[0,2] = 2; a[0,3] = 3; a[0,4] = 4; a[0,5] = 5; a[0,6] = 6; a[0,7] = 7; a[0,8] = 8; a[0,9] = 9;
				a[0,10] = 10; a[0,11] = 11; a[0,12] = 12; a[0,13] = 13; a[0,14] = 14; a[0,15] = 15; a[0,16] = 16; a[0,17] = 17; a[0,18] = 18; a[0,19] = 19;
				a[1,0] = 0; a[1,1] = 1; a[1,2] = 2; a[1,3] = 3; a[1,4] = 4; a[1,5] = 5; a[1,6] = 6; a[1,7] = 7; a[1,8] = 8; a[1,9] = 9;
				a[1,10] = 10; a[1,11] = 11; a[1,12] = 12; a[1,13] = 13; a[1,14] = 14; a[1,15] = 15; a[1,16] = 16; a[1,17] = 17; a[1,18] = 18; a[1,19] = 19;
				a[2,0] = 0; a[2,1] = 1; a[2,2] = 2; a[2,3] = 3; a[2,4] = 4; a[2,5] = 5; a[2,6] = 6; a[2,7] = 7; a[2,8] = 8; a[2,9] = 9;
				a[2,10] = 10; a[2,11] = 11; a[2,12] = 12; a[2,13] = 13; a[2,14] = 14; a[2,15] = 15; a[2,16] = 16; a[2,17] = 17; a[2,18] = 18; a[2,19] = 19;
				a[3,0] = 0; a[3,1] = 1; a[3,2] = 2; a[3,3] = 3; a[3,4] = 4; a[3,5] = 5; a[3,6] = 6; a[3,7] = 7; a[3,8] = 8; a[3,9] = 9;
				a[3,10] = 10; a[3,11] = 11; a[3,12] = 12; a[3,13] = 13; a[3,14] = 14; a[3,15] = 15; a[3,16] = 16; a[3,17] = 17; a[3,18] = 18; a[3,19] = 19;
				a[4,0] = 0; a[4,1] = 1; a[4,2] = 2; a[4,3] = 3; a[4,4] = 4; a[4,5] = 5; a[4,6] = 6; a[4,7] = 7; a[4,8] = 8; a[4,9] = 9;
				a[4,10] = 10; a[4,11] = 11; a[4,12] = 12; a[4,13] = 13; a[4,14] = 14; a[4,15] = 15; a[4,16] = 16; a[4,17] = 17; a[4,18] = 18; a[4,19] = 19;
				a[5,0] = 0; a[5,1] = 1; a[5,2] = 2; a[5,3] = 3; a[5,4] = 4; a[5,5] = 5; a[5,6] = 6; a[5,7] = 7; a[5,8] = 8; a[5,9] = 9;
				a[5,10] = 10; a[5,11] = 11; a[5,12] = 12; a[5,13] = 13; a[5,14] = 14; a[5,15] = 15; a[5,16] = 16; a[5,17] = 17; a[5,18] = 18; a[5,19] = 19;
				a[6,0] = 0; a[6,1] = 1; a[6,2] = 2; a[6,3] = 3; a[6,4] = 4; a[6,5] = 5; a[6,6] = 6; a[6,7] = 7; a[6,8] = 8; a[6,9] = 9;
				a[6,10] = 10; a[6,11] = 11; a[6,12] = 12; a[6,13] = 13; a[6,14] = 14; a[6,15] = 15; a[6,16] = 16; a[6,17] = 17; a[6,18] = 18; a[6,19] = 19;
				a[7,0] = 0; a[7,1] = 1; a[7,2] = 2; a[7,3] = 3; a[7,4] = 4; a[7,5] = 5; a[7,6] = 6; a[7,7] = 7; a[7,8] = 8; a[7,9] = 9;
				a[7,10] = 10; a[7,11] = 11; a[7,12] = 12; a[7,13] = 13; a[7,14] = 14; a[7,15] = 15; a[7,16] = 16; a[7,17] = 17; a[7,18] = 18; a[7,19] = 19;
				a[8,0] = 0; a[8,1] = 1; a[8,2] = 2; a[8,3] = 3; a[8,4] = 4; a[8,5] = 5; a[8,6] = 6; a[8,7] = 7; a[8,8] = 8; a[8,9] = 9;
				a[8,10] = 10; a[8,11] = 11; a[8,12] = 12; a[8,13] = 13; a[8,14] = 14; a[8,15] = 15; a[8,16] = 16; a[8,17] = 17; a[8,18] = 18; a[8,19] = 19;
				a[9,0] = 0; a[9,1] = 1; a[9,2] = 2; a[9,3] = 3; a[9,4] = 4; a[9,5] = 5; a[9,6] = 6; a[9,7] = 7; a[9,8] = 8; a[9,9] = 9;
				a[9,10] = 10; a[9,11] = 11; a[9,12] = 12; a[9,13] = 13; a[9,14] = 14; a[9,15] = 15; a[9,16] = 16; a[9,17] = 17; a[9,18] = 18; a[9,19] = 19;
				a[10,0] = 0; a[10,1] = 1; a[10,2] = 2; a[10,3] = 3; a[10,4] = 4; a[10,5] = 5; a[10,6] = 6; a[10,7] = 7; a[10,8] = 8; a[10,9] = 9;
				a[10,10] = 10; a[10,11] = 11; a[10,12] = 12; a[10,13] = 13; a[10,14] = 14; a[10,15] = 15; a[10,16] = 16; a[10,17] = 17; a[10,18] = 18; a[10,19] = 19;
				a[11,0] = 0; a[11,1] = 1; a[11,2] = 2; a[11,3] = 3; a[11,4] = 4; a[11,5] = 5; a[11,6] = 6; a[11,7] = 7; a[11,8] = 8; a[11,9] = 9;
				a[11,10] = 10; a[11,11] = 11; a[11,12] = 12; a[11,13] = 13; a[11,14] = 14; a[11,15] = 15; a[11,16] = 16; a[11,17] = 17; a[11,18] = 18; a[11,19] = 19;
				a[12,0] = 0; a[12,1] = 1; a[12,2] = 2; a[12,3] = 3; a[12,4] = 4; a[12,5] = 5; a[12,6] = 6; a[12,7] = 7; a[12,8] = 8; a[12,9] = 9;
				a[12,10] = 10; a[12,11] = 11; a[12,12] = 12; a[12,13] = 13; a[12,14] = 14; a[12,15] = 15; a[12,16] = 16; a[12,17] = 17; a[12,18] = 18; a[12,19] = 19;
				a[13,0] = 0; a[13,1] = 1; a[13,2] = 2; a[13,3] = 3; a[13,4] = 4; a[13,5] = 5; a[13,6] = 6; a[13,7] = 7; a[13,8] = 8; a[13,9] = 9;
				a[13,10] = 10; a[13,11] = 11; a[13,12] = 12; a[13,13] = 13; a[13,14] = 14; a[13,15] = 15; a[13,16] = 16; a[13,17] = 17; a[13,18] = 18; a[13,19] = 19;
				a[14,0] = 0; a[14,1] = 1; a[14,2] = 2; a[14,3] = 3; a[14,4] = 4; a[14,5] = 5; a[14,6] = 6; a[14,7] = 7; a[14,8] = 8; a[14,9] = 9;
				a[14,10] = 10; a[14,11] = 11; a[14,12] = 12; a[14,13] = 13; a[14,14] = 14; a[14,15] = 15; a[14,16] = 16; a[14,17] = 17; a[14,18] = 18; a[14,19] = 19;
				a[15,0] = 0; a[15,1] = 1; a[15,2] = 2; a[15,3] = 3; a[15,4] = 4; a[15,5] = 5; a[15,6] = 6; a[15,7] = 7; a[15,8] = 8; a[15,9] = 9;
				a[15,10] = 10; a[15,11] = 11; a[15,12] = 12; a[15,13] = 13; a[15,14] = 14; a[15,15] = 15; a[15,16] = 16; a[15,17] = 17; a[15,18] = 18; a[15,19] = 19;
				a[16,0] = 0; a[16,1] = 1; a[16,2] = 2; a[16,3] = 3; a[16,4] = 4; a[16,5] = 5; a[16,6] = 6; a[16,7] = 7; a[16,8] = 8; a[16,9] = 9;
				a[16,10] = 10; a[16,11] = 11; a[16,12] = 12; a[16,13] = 13; a[16,14] = 14; a[16,15] = 15; a[16,16] = 16; a[16,17] = 17; a[16,18] = 18; a[16,19] = 19;
				a[17,0] = 0; a[17,1] = 1; a[17,2] = 2; a[17,3] = 3; a[17,4] = 4; a[17,5] = 5; a[17,6] = 6; a[17,7] = 7; a[17,8] = 8; a[17,9] = 9;
				a[17,10] = 10; a[17,11] = 11; a[17,12] = 12; a[17,13] = 13; a[17,14] = 14; a[17,15] = 15; a[17,16] = 16; a[17,17] = 17; a[17,18] = 18; a[17,19] = 19;
				a[18,0] = 0; a[18,1] = 1; a[18,2] = 2; a[18,3] = 3; a[18,4] = 4; a[18,5] = 5; a[18,6] = 6; a[18,7] = 7; a[18,8] = 8; a[18,9] = 9;
				a[18,10] = 10; a[18,11] = 11; a[18,12] = 12; a[18,13] = 13; a[18,14] = 14; a[18,15] = 15; a[18,16] = 16; a[18,17] = 17; a[18,18] = 18; a[18,19] = 19;
				a[19,0] = 0; a[19,1] = 1; a[19,2] = 2; a[19,3] = 3; a[19,4] = 4; a[19,5] = 5; a[19,6] = 6; a[19,7] = 7; a[19,8] = 8; a[19,9] = 9;
				a[19,10] = 10; a[19,11] = 11; a[19,12] = 12; a[19,13] = 13; a[19,14] = 14; a[19,15] = 15; a[19,16] = 16; a[19,17] = 17; a[19,18] = 18; a[19,19] = 19;
				_val += a[i%10, i%10];
			}
		}
	}
}
