//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersion("2.0.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("6/04/2001 3:43:19 AM")]

namespace AxMSChart20Lib {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{3a2b370c-ba0a-11d1-b137-0000f8753f5d}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ChartSelected")]
    [System.ComponentModel.DefaultProperty("ChartData")]
    public class AxMSChart : System.Windows.Forms.AxHost {
        
        private MSChart20Lib._DMSChart ocx;
        
        private AxMSChartEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        private msdatasrc.DataSource axDataSource;
        
        public AxMSChart() : 
                base("3a2b370c-ba0a-11d1-b137-0000f8753f5d") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual bool AutoIncrement {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoIncrement", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AutoIncrement;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoIncrement", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AutoIncrement = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual bool RandomFill {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RandomFill", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.RandomFill;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RandomFill", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.RandomFill = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual MSChart20Lib.VtChChartType chartType {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("chartType", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.chartType;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("chartType", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.chartType = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual short Column {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Column", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Column;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Column", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Column = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual short ColumnCount {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColumnCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ColumnCount;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColumnCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ColumnCount = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual string ColumnLabel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColumnLabel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ColumnLabel;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColumnLabel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ColumnLabel = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual short ColumnLabelCount {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColumnLabelCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ColumnLabelCount;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColumnLabelCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ColumnLabelCount = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual short ColumnLabelIndex {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColumnLabelIndex", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ColumnLabelIndex;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColumnLabelIndex", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ColumnLabelIndex = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual string Data {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Data", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Data;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Data", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Data = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual string FootnoteText {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FootnoteText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FootnoteText;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FootnoteText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FootnoteText = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual bool Repaint {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Repaint", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Repaint;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Repaint", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Repaint = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual short Row {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Row", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Row;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Row", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Row = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual short RowCount {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.RowCount;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.RowCount = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual string RowLabel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowLabel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.RowLabel;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowLabel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.RowLabel = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual short RowLabelCount {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowLabelCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.RowLabelCount;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowLabelCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.RowLabelCount = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual short RowLabelIndex {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowLabelIndex", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.RowLabelIndex;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RowLabelIndex", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.RowLabelIndex = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual short SeriesColumn {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SeriesColumn", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SeriesColumn;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SeriesColumn", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SeriesColumn = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual MSChart20Lib.VtChSeriesType SeriesType {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SeriesType", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SeriesType;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SeriesType", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SeriesType = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual bool ShowLegend {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowLegend", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowLegend;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowLegend", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowLegend = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual MSChart20Lib.VtChDrawMode DrawMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DrawMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DrawMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-504)]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        public virtual MSChart20Lib.VtBorderStyle BorderStyle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BorderStyle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BorderStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BorderStyle = value;
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-515)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.Int32")]
        public virtual int hWnd {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("hWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return (this.ocx.hWnd);
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual MSChart20Lib.Title Title {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Title", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Title;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual MSChart20Lib.Footnote Footnote {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Footnote", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Footnote;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(28)]
        public virtual string TitleText {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TitleText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TitleText;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TitleText", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TitleText = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(29)]
        public virtual bool Stacking {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Stacking", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Stacking;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Stacking", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Stacking = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(30)]
        public virtual MSChart20Lib.VtTextLengthType TextLengthType {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextLengthType", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TextLengthType;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TextLengthType", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TextLengthType = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(32)]
        public virtual bool AllowSelections {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowSelections", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AllowSelections;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowSelections", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AllowSelections = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(33)]
        public virtual bool AllowSeriesSelection {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowSeriesSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AllowSeriesSelection;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowSeriesSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AllowSeriesSelection = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(34)]
        public virtual bool AllowDynamicRotation {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowDynamicRotation", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AllowDynamicRotation;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowDynamicRotation", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AllowDynamicRotation = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(35)]
        public virtual short ActiveSeriesCount {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ActiveSeriesCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ActiveSeriesCount;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(36)]
        public virtual MSChart20Lib.Backdrop Backdrop {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Backdrop", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Backdrop;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(38)]
        public virtual MSChart20Lib.Legend Legend {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Legend", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Legend;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(39)]
        public virtual MSChart20Lib.DataGrid DataGrid {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DataGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DataGrid;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(40)]
        public virtual MSChart20Lib.Plot Plot {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Plot", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Plot;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(43)]
        public virtual bool AllowDithering {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowDithering", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AllowDithering;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowDithering", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AllowDithering = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(45)]
        public virtual bool DoSetCursor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DoSetCursor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DoSetCursor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DoSetCursor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DoSetCursor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(47)]
        public virtual bool Chart3d {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Chart3d", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Chart3d;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(0)]
        public virtual object ChartData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ChartData;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ChartData = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(72)]
        public virtual int Chart {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Chart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Chart;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(74)]
        public virtual MSChart20Lib.VtMousePointer MousePointer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MousePointer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MousePointer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1550)]
        public virtual MSChart20Lib.OLEDragConstants OLEDragMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDragMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDragMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDragMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDragMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1551)]
        public virtual MSChart20Lib.OLEDropConstants OLEDropMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.OLEDropMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.OLEDropMode = value;
            }
        }
        
        [System.Runtime.InteropServices.DispIdAttribute(71)]
        public virtual msdatasrc.DataSource DataSource {
            get {
                return this.axDataSource;
            }
            set {
                this.axDataSource = value;
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    this.ocx.DataSource = value;
                }
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(75)]
        [System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        public virtual string DataMember {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DataMember", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DataMember;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DataMember", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DataMember = value;
            }
        }
        
        public event _DMSChartEvents_MouseUpEventHandler MouseUpEvent;
        
        public event _DMSChartEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event _DMSChartEvents_MouseDownEventHandler MouseDownEvent;
        
        public event _DMSChartEvents_KeyUpEventHandler KeyUpEvent;
        
        public event _DMSChartEvents_KeyPressEventHandler KeyPressEvent;
        
        public event _DMSChartEvents_KeyDownEventHandler KeyDownEvent;
        
        public event System.EventHandler DblClick;
        
        public event System.EventHandler ClickEvent;
        
        public event System.EventHandler DonePainting;
        
        public event _DMSChartEvents_DataUpdatedEventHandler DataUpdated;
        
        public event _DMSChartEvents_TitleUpdatedEventHandler TitleUpdated;
        
        public event _DMSChartEvents_SeriesUpdatedEventHandler SeriesUpdated;
        
        public event _DMSChartEvents_PointLabelUpdatedEventHandler PointLabelUpdated;
        
        public event _DMSChartEvents_PointUpdatedEventHandler PointUpdated;
        
        public event _DMSChartEvents_PlotUpdatedEventHandler PlotUpdated;
        
        public event _DMSChartEvents_LegendUpdatedEventHandler LegendUpdated;
        
        public event _DMSChartEvents_FootnoteUpdatedEventHandler FootnoteUpdated;
        
        public event _DMSChartEvents_ChartUpdatedEventHandler ChartUpdated;
        
        public event _DMSChartEvents_AxisTitleUpdatedEventHandler AxisTitleUpdated;
        
        public event _DMSChartEvents_AxisLabelUpdatedEventHandler AxisLabelUpdated;
        
        public event _DMSChartEvents_AxisUpdatedEventHandler AxisUpdated;
        
        public event _DMSChartEvents_SeriesActivatedEventHandler SeriesActivated;
        
        public event _DMSChartEvents_PointLabelActivatedEventHandler PointLabelActivated;
        
        public event _DMSChartEvents_PointActivatedEventHandler PointActivated;
        
        public event _DMSChartEvents_AxisTitleActivatedEventHandler AxisTitleActivated;
        
        public event _DMSChartEvents_AxisLabelActivatedEventHandler AxisLabelActivated;
        
        public event _DMSChartEvents_AxisActivatedEventHandler AxisActivated;
        
        public event _DMSChartEvents_PlotActivatedEventHandler PlotActivated;
        
        public event _DMSChartEvents_LegendActivatedEventHandler LegendActivated;
        
        public event _DMSChartEvents_FootnoteActivatedEventHandler FootnoteActivated;
        
        public event _DMSChartEvents_TitleActivatedEventHandler TitleActivated;
        
        public event _DMSChartEvents_ChartActivatedEventHandler ChartActivated;
        
        public event _DMSChartEvents_SeriesSelectedEventHandler SeriesSelected;
        
        public event _DMSChartEvents_PointLabelSelectedEventHandler PointLabelSelected;
        
        public event _DMSChartEvents_PointSelectedEventHandler PointSelected;
        
        public event _DMSChartEvents_AxisTitleSelectedEventHandler AxisTitleSelected;
        
        public event _DMSChartEvents_AxisLabelSelectedEventHandler AxisLabelSelected;
        
        public event _DMSChartEvents_AxisSelectedEventHandler AxisSelected;
        
        public event _DMSChartEvents_PlotSelectedEventHandler PlotSelected;
        
        public event _DMSChartEvents_LegendSelectedEventHandler LegendSelected;
        
        public event _DMSChartEvents_FootnoteSelectedEventHandler FootnoteSelected;
        
        public event _DMSChartEvents_TitleSelectedEventHandler TitleSelected;
        
        public event _DMSChartEvents_ChartSelectedEventHandler ChartSelected;
        
        public event _DMSChartEvents_OLEDragDropEventHandler OLEDragDrop;
        
        public event _DMSChartEvents_OLEDragOverEventHandler OLEDragOver;
        
        public event _DMSChartEvents_OLECompleteDragEventHandler OLECompleteDrag;
        
        public event _DMSChartEvents_OLESetDataEventHandler OLESetData;
        
        public event _DMSChartEvents_OLEGiveFeedbackEventHandler OLEGiveFeedback;
        
        public event _DMSChartEvents_OLEStartDragEventHandler OLEStartDrag;
        
        public virtual void OLEDrag() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OLEDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.OLEDrag();
        }
        
        public virtual void TwipsToChartPart(int xVal, int yVal, out short part, out short index1, out short index2, out short index3, out short index4) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TwipsToChartPart", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.TwipsToChartPart(xVal, yVal, out part, out index1, out index2, out index3, out index4);
        }
        
        public virtual void GetSelectedPart(out short part, out short index1, out short index2, out short index3, out short index4) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSelectedPart", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.GetSelectedPart(out part, out index1, out index2, out index3, out index4);
        }
        
        public virtual void SelectPart(short part, short index1, short index2, short index3, short index4) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectPart", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SelectPart(part, index1, index2, index3, index4);
        }
        
        public virtual void ToDefaults() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ToDefaults", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ToDefaults();
        }
        
        public virtual void CtlLayout() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlLayout", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Layout();
        }
        
        public virtual void EditCopy() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditCopy", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.EditCopy();
        }
        
        public virtual void EditPaste() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditPaste", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.EditPaste();
        }
        
        public virtual void CtlRefresh() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlRefresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Refresh();
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxMSChartEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MSChart20Lib._DMSChartEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MSChart20Lib._DMSChart)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, _DMSChartEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, _DMSChartEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, _DMSChartEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyUpEvent(object sender, _DMSChartEvents_KeyUpEvent e) {
            if ((this.KeyUpEvent != null)) {
                this.KeyUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyPressEvent(object sender, _DMSChartEvents_KeyPressEvent e) {
            if ((this.KeyPressEvent != null)) {
                this.KeyPressEvent(sender, e);
            }
        }
        
        internal void RaiseOnKeyDownEvent(object sender, _DMSChartEvents_KeyDownEvent e) {
            if ((this.KeyDownEvent != null)) {
                this.KeyDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
        
        internal void RaiseOnClickEvent(object sender, System.EventArgs e) {
            if ((this.ClickEvent != null)) {
                this.ClickEvent(sender, e);
            }
        }
        
        internal void RaiseOnDonePainting(object sender, System.EventArgs e) {
            if ((this.DonePainting != null)) {
                this.DonePainting(sender, e);
            }
        }
        
        internal void RaiseOnDataUpdated(object sender, _DMSChartEvents_DataUpdatedEvent e) {
            if ((this.DataUpdated != null)) {
                this.DataUpdated(sender, e);
            }
        }
        
        internal void RaiseOnTitleUpdated(object sender, _DMSChartEvents_TitleUpdatedEvent e) {
            if ((this.TitleUpdated != null)) {
                this.TitleUpdated(sender, e);
            }
        }
        
        internal void RaiseOnSeriesUpdated(object sender, _DMSChartEvents_SeriesUpdatedEvent e) {
            if ((this.SeriesUpdated != null)) {
                this.SeriesUpdated(sender, e);
            }
        }
        
        internal void RaiseOnPointLabelUpdated(object sender, _DMSChartEvents_PointLabelUpdatedEvent e) {
            if ((this.PointLabelUpdated != null)) {
                this.PointLabelUpdated(sender, e);
            }
        }
        
        internal void RaiseOnPointUpdated(object sender, _DMSChartEvents_PointUpdatedEvent e) {
            if ((this.PointUpdated != null)) {
                this.PointUpdated(sender, e);
            }
        }
        
        internal void RaiseOnPlotUpdated(object sender, _DMSChartEvents_PlotUpdatedEvent e) {
            if ((this.PlotUpdated != null)) {
                this.PlotUpdated(sender, e);
            }
        }
        
        internal void RaiseOnLegendUpdated(object sender, _DMSChartEvents_LegendUpdatedEvent e) {
            if ((this.LegendUpdated != null)) {
                this.LegendUpdated(sender, e);
            }
        }
        
        internal void RaiseOnFootnoteUpdated(object sender, _DMSChartEvents_FootnoteUpdatedEvent e) {
            if ((this.FootnoteUpdated != null)) {
                this.FootnoteUpdated(sender, e);
            }
        }
        
        internal void RaiseOnChartUpdated(object sender, _DMSChartEvents_ChartUpdatedEvent e) {
            if ((this.ChartUpdated != null)) {
                this.ChartUpdated(sender, e);
            }
        }
        
        internal void RaiseOnAxisTitleUpdated(object sender, _DMSChartEvents_AxisTitleUpdatedEvent e) {
            if ((this.AxisTitleUpdated != null)) {
                this.AxisTitleUpdated(sender, e);
            }
        }
        
        internal void RaiseOnAxisLabelUpdated(object sender, _DMSChartEvents_AxisLabelUpdatedEvent e) {
            if ((this.AxisLabelUpdated != null)) {
                this.AxisLabelUpdated(sender, e);
            }
        }
        
        internal void RaiseOnAxisUpdated(object sender, _DMSChartEvents_AxisUpdatedEvent e) {
            if ((this.AxisUpdated != null)) {
                this.AxisUpdated(sender, e);
            }
        }
        
        internal void RaiseOnSeriesActivated(object sender, _DMSChartEvents_SeriesActivatedEvent e) {
            if ((this.SeriesActivated != null)) {
                this.SeriesActivated(sender, e);
            }
        }
        
        internal void RaiseOnPointLabelActivated(object sender, _DMSChartEvents_PointLabelActivatedEvent e) {
            if ((this.PointLabelActivated != null)) {
                this.PointLabelActivated(sender, e);
            }
        }
        
        internal void RaiseOnPointActivated(object sender, _DMSChartEvents_PointActivatedEvent e) {
            if ((this.PointActivated != null)) {
                this.PointActivated(sender, e);
            }
        }
        
        internal void RaiseOnAxisTitleActivated(object sender, _DMSChartEvents_AxisTitleActivatedEvent e) {
            if ((this.AxisTitleActivated != null)) {
                this.AxisTitleActivated(sender, e);
            }
        }
        
        internal void RaiseOnAxisLabelActivated(object sender, _DMSChartEvents_AxisLabelActivatedEvent e) {
            if ((this.AxisLabelActivated != null)) {
                this.AxisLabelActivated(sender, e);
            }
        }
        
        internal void RaiseOnAxisActivated(object sender, _DMSChartEvents_AxisActivatedEvent e) {
            if ((this.AxisActivated != null)) {
                this.AxisActivated(sender, e);
            }
        }
        
        internal void RaiseOnPlotActivated(object sender, _DMSChartEvents_PlotActivatedEvent e) {
            if ((this.PlotActivated != null)) {
                this.PlotActivated(sender, e);
            }
        }
        
        internal void RaiseOnLegendActivated(object sender, _DMSChartEvents_LegendActivatedEvent e) {
            if ((this.LegendActivated != null)) {
                this.LegendActivated(sender, e);
            }
        }
        
        internal void RaiseOnFootnoteActivated(object sender, _DMSChartEvents_FootnoteActivatedEvent e) {
            if ((this.FootnoteActivated != null)) {
                this.FootnoteActivated(sender, e);
            }
        }
        
        internal void RaiseOnTitleActivated(object sender, _DMSChartEvents_TitleActivatedEvent e) {
            if ((this.TitleActivated != null)) {
                this.TitleActivated(sender, e);
            }
        }
        
        internal void RaiseOnChartActivated(object sender, _DMSChartEvents_ChartActivatedEvent e) {
            if ((this.ChartActivated != null)) {
                this.ChartActivated(sender, e);
            }
        }
        
        internal void RaiseOnSeriesSelected(object sender, _DMSChartEvents_SeriesSelectedEvent e) {
            if ((this.SeriesSelected != null)) {
                this.SeriesSelected(sender, e);
            }
        }
        
        internal void RaiseOnPointLabelSelected(object sender, _DMSChartEvents_PointLabelSelectedEvent e) {
            if ((this.PointLabelSelected != null)) {
                this.PointLabelSelected(sender, e);
            }
        }
        
        internal void RaiseOnPointSelected(object sender, _DMSChartEvents_PointSelectedEvent e) {
            if ((this.PointSelected != null)) {
                this.PointSelected(sender, e);
            }
        }
        
        internal void RaiseOnAxisTitleSelected(object sender, _DMSChartEvents_AxisTitleSelectedEvent e) {
            if ((this.AxisTitleSelected != null)) {
                this.AxisTitleSelected(sender, e);
            }
        }
        
        internal void RaiseOnAxisLabelSelected(object sender, _DMSChartEvents_AxisLabelSelectedEvent e) {
            if ((this.AxisLabelSelected != null)) {
                this.AxisLabelSelected(sender, e);
            }
        }
        
        internal void RaiseOnAxisSelected(object sender, _DMSChartEvents_AxisSelectedEvent e) {
            if ((this.AxisSelected != null)) {
                this.AxisSelected(sender, e);
            }
        }
        
        internal void RaiseOnPlotSelected(object sender, _DMSChartEvents_PlotSelectedEvent e) {
            if ((this.PlotSelected != null)) {
                this.PlotSelected(sender, e);
            }
        }
        
        internal void RaiseOnLegendSelected(object sender, _DMSChartEvents_LegendSelectedEvent e) {
            if ((this.LegendSelected != null)) {
                this.LegendSelected(sender, e);
            }
        }
        
        internal void RaiseOnFootnoteSelected(object sender, _DMSChartEvents_FootnoteSelectedEvent e) {
            if ((this.FootnoteSelected != null)) {
                this.FootnoteSelected(sender, e);
            }
        }
        
        internal void RaiseOnTitleSelected(object sender, _DMSChartEvents_TitleSelectedEvent e) {
            if ((this.TitleSelected != null)) {
                this.TitleSelected(sender, e);
            }
        }
        
        internal void RaiseOnChartSelected(object sender, _DMSChartEvents_ChartSelectedEvent e) {
            if ((this.ChartSelected != null)) {
                this.ChartSelected(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragDrop(object sender, _DMSChartEvents_OLEDragDropEvent e) {
            if ((this.OLEDragDrop != null)) {
                this.OLEDragDrop(sender, e);
            }
        }
        
        internal void RaiseOnOLEDragOver(object sender, _DMSChartEvents_OLEDragOverEvent e) {
            if ((this.OLEDragOver != null)) {
                this.OLEDragOver(sender, e);
            }
        }
        
        internal void RaiseOnOLECompleteDrag(object sender, _DMSChartEvents_OLECompleteDragEvent e) {
            if ((this.OLECompleteDrag != null)) {
                this.OLECompleteDrag(sender, e);
            }
        }
        
        internal void RaiseOnOLESetData(object sender, _DMSChartEvents_OLESetDataEvent e) {
            if ((this.OLESetData != null)) {
                this.OLESetData(sender, e);
            }
        }
        
        internal void RaiseOnOLEGiveFeedback(object sender, _DMSChartEvents_OLEGiveFeedbackEvent e) {
            if ((this.OLEGiveFeedback != null)) {
                this.OLEGiveFeedback(sender, e);
            }
        }
        
        internal void RaiseOnOLEStartDrag(object sender, _DMSChartEvents_OLEStartDragEvent e) {
            if ((this.OLEStartDrag != null)) {
                this.OLEStartDrag(sender, e);
            }
        }
        
        protected override void OnInPlaceActive() {
            base.OnInPlaceActive();
            if ((this.axDataSource != null)) {
                this.ocx.DataSource = this.axDataSource;
            }
        }
    }
    
    public delegate void _DMSChartEvents_MouseUpEventHandler(object sender, _DMSChartEvents_MouseUpEvent e);
    
    public class _DMSChartEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DMSChartEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DMSChartEvents_MouseMoveEventHandler(object sender, _DMSChartEvents_MouseMoveEvent e);
    
    public class _DMSChartEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DMSChartEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DMSChartEvents_MouseDownEventHandler(object sender, _DMSChartEvents_MouseDownEvent e);
    
    public class _DMSChartEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DMSChartEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DMSChartEvents_KeyUpEventHandler(object sender, _DMSChartEvents_KeyUpEvent e);
    
    public class _DMSChartEvents_KeyUpEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _DMSChartEvents_KeyUpEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _DMSChartEvents_KeyPressEventHandler(object sender, _DMSChartEvents_KeyPressEvent e);
    
    public class _DMSChartEvents_KeyPressEvent {
        
        public short keyAscii;
        
        public _DMSChartEvents_KeyPressEvent(short keyAscii) {
            this.keyAscii = keyAscii;
        }
    }
    
    public delegate void _DMSChartEvents_KeyDownEventHandler(object sender, _DMSChartEvents_KeyDownEvent e);
    
    public class _DMSChartEvents_KeyDownEvent {
        
        public short keyCode;
        
        public short shift;
        
        public _DMSChartEvents_KeyDownEvent(short keyCode, short shift) {
            this.keyCode = keyCode;
            this.shift = shift;
        }
    }
    
    public delegate void _DMSChartEvents_DataUpdatedEventHandler(object sender, _DMSChartEvents_DataUpdatedEvent e);
    
    public class _DMSChartEvents_DataUpdatedEvent {
        
        public short row;
        
        public short column;
        
        public short labelRow;
        
        public short labelColumn;
        
        public short labelSetIndex;
        
        public short updateFlags;
        
        public _DMSChartEvents_DataUpdatedEvent(short row, short column, short labelRow, short labelColumn, short labelSetIndex, short updateFlags) {
            this.row = row;
            this.column = column;
            this.labelRow = labelRow;
            this.labelColumn = labelColumn;
            this.labelSetIndex = labelSetIndex;
            this.updateFlags = updateFlags;
        }
    }
    
    public delegate void _DMSChartEvents_TitleUpdatedEventHandler(object sender, _DMSChartEvents_TitleUpdatedEvent e);
    
    public class _DMSChartEvents_TitleUpdatedEvent {
        
        public short updateFlags;
        
        public _DMSChartEvents_TitleUpdatedEvent(short updateFlags) {
            this.updateFlags = updateFlags;
        }
    }
    
    public delegate void _DMSChartEvents_SeriesUpdatedEventHandler(object sender, _DMSChartEvents_SeriesUpdatedEvent e);
    
    public class _DMSChartEvents_SeriesUpdatedEvent {
        
        public short series;
        
        public short updateFlags;
        
        public _DMSChartEvents_SeriesUpdatedEvent(short series, short updateFlags) {
            this.series = series;
            this.updateFlags = updateFlags;
        }
    }
    
    public delegate void _DMSChartEvents_PointLabelUpdatedEventHandler(object sender, _DMSChartEvents_PointLabelUpdatedEvent e);
    
    public class _DMSChartEvents_PointLabelUpdatedEvent {
        
        public short series;
        
        public short dataPoint;
        
        public short updateFlags;
        
        public _DMSChartEvents_PointLabelUpdatedEvent(short series, short dataPoint, short updateFlags) {
            this.series = series;
            this.dataPoint = dataPoint;
            this.updateFlags = updateFlags;
        }
    }
    
    public delegate void _DMSChartEvents_PointUpdatedEventHandler(object sender, _DMSChartEvents_PointUpdatedEvent e);
    
    public class _DMSChartEvents_PointUpdatedEvent {
        
        public short series;
        
        public short dataPoint;
        
        public short updateFlags;
        
        public _DMSChartEvents_PointUpdatedEvent(short series, short dataPoint, short updateFlags) {
            this.series = series;
            this.dataPoint = dataPoint;
            this.updateFlags = updateFlags;
        }
    }
    
    public delegate void _DMSChartEvents_PlotUpdatedEventHandler(object sender, _DMSChartEvents_PlotUpdatedEvent e);
    
    public class _DMSChartEvents_PlotUpdatedEvent {
        
        public short updateFlags;
        
        public _DMSChartEvents_PlotUpdatedEvent(short updateFlags) {
            this.updateFlags = updateFlags;
        }
    }
    
    public delegate void _DMSChartEvents_LegendUpdatedEventHandler(object sender, _DMSChartEvents_LegendUpdatedEvent e);
    
    public class _DMSChartEvents_LegendUpdatedEvent {
        
        public short updateFlags;
        
        public _DMSChartEvents_LegendUpdatedEvent(short updateFlags) {
            this.updateFlags = updateFlags;
        }
    }
    
    public delegate void _DMSChartEvents_FootnoteUpdatedEventHandler(object sender, _DMSChartEvents_FootnoteUpdatedEvent e);
    
    public class _DMSChartEvents_FootnoteUpdatedEvent {
        
        public short updateFlags;
        
        public _DMSChartEvents_FootnoteUpdatedEvent(short updateFlags) {
            this.updateFlags = updateFlags;
        }
    }
    
    public delegate void _DMSChartEvents_ChartUpdatedEventHandler(object sender, _DMSChartEvents_ChartUpdatedEvent e);
    
    public class _DMSChartEvents_ChartUpdatedEvent {
        
        public short updateFlags;
        
        public _DMSChartEvents_ChartUpdatedEvent(short updateFlags) {
            this.updateFlags = updateFlags;
        }
    }
    
    public delegate void _DMSChartEvents_AxisTitleUpdatedEventHandler(object sender, _DMSChartEvents_AxisTitleUpdatedEvent e);
    
    public class _DMSChartEvents_AxisTitleUpdatedEvent {
        
        public short axisID;
        
        public short axisIndex;
        
        public short updateFlags;
        
        public _DMSChartEvents_AxisTitleUpdatedEvent(short axisID, short axisIndex, short updateFlags) {
            this.axisID = axisID;
            this.axisIndex = axisIndex;
            this.updateFlags = updateFlags;
        }
    }
    
    public delegate void _DMSChartEvents_AxisLabelUpdatedEventHandler(object sender, _DMSChartEvents_AxisLabelUpdatedEvent e);
    
    public class _DMSChartEvents_AxisLabelUpdatedEvent {
        
        public short axisID;
        
        public short axisIndex;
        
        public short labelSetIndex;
        
        public short labelIndex;
        
        public short updateFlags;
        
        public _DMSChartEvents_AxisLabelUpdatedEvent(short axisID, short axisIndex, short labelSetIndex, short labelIndex, short updateFlags) {
            this.axisID = axisID;
            this.axisIndex = axisIndex;
            this.labelSetIndex = labelSetIndex;
            this.labelIndex = labelIndex;
            this.updateFlags = updateFlags;
        }
    }
    
    public delegate void _DMSChartEvents_AxisUpdatedEventHandler(object sender, _DMSChartEvents_AxisUpdatedEvent e);
    
    public class _DMSChartEvents_AxisUpdatedEvent {
        
        public short axisID;
        
        public short axisIndex;
        
        public short updateFlags;
        
        public _DMSChartEvents_AxisUpdatedEvent(short axisID, short axisIndex, short updateFlags) {
            this.axisID = axisID;
            this.axisIndex = axisIndex;
            this.updateFlags = updateFlags;
        }
    }
    
    public delegate void _DMSChartEvents_SeriesActivatedEventHandler(object sender, _DMSChartEvents_SeriesActivatedEvent e);
    
    public class _DMSChartEvents_SeriesActivatedEvent {
        
        public short series;
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_SeriesActivatedEvent(short series, short mouseFlags) {
            this.series = series;
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_PointLabelActivatedEventHandler(object sender, _DMSChartEvents_PointLabelActivatedEvent e);
    
    public class _DMSChartEvents_PointLabelActivatedEvent {
        
        public short series;
        
        public short dataPoint;
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_PointLabelActivatedEvent(short series, short dataPoint, short mouseFlags) {
            this.series = series;
            this.dataPoint = dataPoint;
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_PointActivatedEventHandler(object sender, _DMSChartEvents_PointActivatedEvent e);
    
    public class _DMSChartEvents_PointActivatedEvent {
        
        public short series;
        
        public short dataPoint;
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_PointActivatedEvent(short series, short dataPoint, short mouseFlags) {
            this.series = series;
            this.dataPoint = dataPoint;
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_AxisTitleActivatedEventHandler(object sender, _DMSChartEvents_AxisTitleActivatedEvent e);
    
    public class _DMSChartEvents_AxisTitleActivatedEvent {
        
        public short axisID;
        
        public short axisIndex;
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_AxisTitleActivatedEvent(short axisID, short axisIndex, short mouseFlags) {
            this.axisID = axisID;
            this.axisIndex = axisIndex;
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_AxisLabelActivatedEventHandler(object sender, _DMSChartEvents_AxisLabelActivatedEvent e);
    
    public class _DMSChartEvents_AxisLabelActivatedEvent {
        
        public short axisID;
        
        public short axisIndex;
        
        public short labelSetIndex;
        
        public short labelIndex;
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_AxisLabelActivatedEvent(short axisID, short axisIndex, short labelSetIndex, short labelIndex, short mouseFlags) {
            this.axisID = axisID;
            this.axisIndex = axisIndex;
            this.labelSetIndex = labelSetIndex;
            this.labelIndex = labelIndex;
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_AxisActivatedEventHandler(object sender, _DMSChartEvents_AxisActivatedEvent e);
    
    public class _DMSChartEvents_AxisActivatedEvent {
        
        public short axisID;
        
        public short axisIndex;
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_AxisActivatedEvent(short axisID, short axisIndex, short mouseFlags) {
            this.axisID = axisID;
            this.axisIndex = axisIndex;
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_PlotActivatedEventHandler(object sender, _DMSChartEvents_PlotActivatedEvent e);
    
    public class _DMSChartEvents_PlotActivatedEvent {
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_PlotActivatedEvent(short mouseFlags) {
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_LegendActivatedEventHandler(object sender, _DMSChartEvents_LegendActivatedEvent e);
    
    public class _DMSChartEvents_LegendActivatedEvent {
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_LegendActivatedEvent(short mouseFlags) {
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_FootnoteActivatedEventHandler(object sender, _DMSChartEvents_FootnoteActivatedEvent e);
    
    public class _DMSChartEvents_FootnoteActivatedEvent {
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_FootnoteActivatedEvent(short mouseFlags) {
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_TitleActivatedEventHandler(object sender, _DMSChartEvents_TitleActivatedEvent e);
    
    public class _DMSChartEvents_TitleActivatedEvent {
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_TitleActivatedEvent(short mouseFlags) {
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_ChartActivatedEventHandler(object sender, _DMSChartEvents_ChartActivatedEvent e);
    
    public class _DMSChartEvents_ChartActivatedEvent {
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_ChartActivatedEvent(short mouseFlags) {
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_SeriesSelectedEventHandler(object sender, _DMSChartEvents_SeriesSelectedEvent e);
    
    public class _DMSChartEvents_SeriesSelectedEvent {
        
        public short series;
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_SeriesSelectedEvent(short series, short mouseFlags) {
            this.series = series;
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_PointLabelSelectedEventHandler(object sender, _DMSChartEvents_PointLabelSelectedEvent e);
    
    public class _DMSChartEvents_PointLabelSelectedEvent {
        
        public short series;
        
        public short dataPoint;
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_PointLabelSelectedEvent(short series, short dataPoint, short mouseFlags) {
            this.series = series;
            this.dataPoint = dataPoint;
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_PointSelectedEventHandler(object sender, _DMSChartEvents_PointSelectedEvent e);
    
    public class _DMSChartEvents_PointSelectedEvent {
        
        public short series;
        
        public short dataPoint;
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_PointSelectedEvent(short series, short dataPoint, short mouseFlags) {
            this.series = series;
            this.dataPoint = dataPoint;
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_AxisTitleSelectedEventHandler(object sender, _DMSChartEvents_AxisTitleSelectedEvent e);
    
    public class _DMSChartEvents_AxisTitleSelectedEvent {
        
        public short axisID;
        
        public short axisIndex;
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_AxisTitleSelectedEvent(short axisID, short axisIndex, short mouseFlags) {
            this.axisID = axisID;
            this.axisIndex = axisIndex;
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_AxisLabelSelectedEventHandler(object sender, _DMSChartEvents_AxisLabelSelectedEvent e);
    
    public class _DMSChartEvents_AxisLabelSelectedEvent {
        
        public short axisID;
        
        public short axisIndex;
        
        public short labelSetIndex;
        
        public short labelIndex;
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_AxisLabelSelectedEvent(short axisID, short axisIndex, short labelSetIndex, short labelIndex, short mouseFlags) {
            this.axisID = axisID;
            this.axisIndex = axisIndex;
            this.labelSetIndex = labelSetIndex;
            this.labelIndex = labelIndex;
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_AxisSelectedEventHandler(object sender, _DMSChartEvents_AxisSelectedEvent e);
    
    public class _DMSChartEvents_AxisSelectedEvent {
        
        public short axisID;
        
        public short axisIndex;
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_AxisSelectedEvent(short axisID, short axisIndex, short mouseFlags) {
            this.axisID = axisID;
            this.axisIndex = axisIndex;
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_PlotSelectedEventHandler(object sender, _DMSChartEvents_PlotSelectedEvent e);
    
    public class _DMSChartEvents_PlotSelectedEvent {
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_PlotSelectedEvent(short mouseFlags) {
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_LegendSelectedEventHandler(object sender, _DMSChartEvents_LegendSelectedEvent e);
    
    public class _DMSChartEvents_LegendSelectedEvent {
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_LegendSelectedEvent(short mouseFlags) {
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_FootnoteSelectedEventHandler(object sender, _DMSChartEvents_FootnoteSelectedEvent e);
    
    public class _DMSChartEvents_FootnoteSelectedEvent {
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_FootnoteSelectedEvent(short mouseFlags) {
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_TitleSelectedEventHandler(object sender, _DMSChartEvents_TitleSelectedEvent e);
    
    public class _DMSChartEvents_TitleSelectedEvent {
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_TitleSelectedEvent(short mouseFlags) {
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_ChartSelectedEventHandler(object sender, _DMSChartEvents_ChartSelectedEvent e);
    
    public class _DMSChartEvents_ChartSelectedEvent {
        
        public short mouseFlags;
        
        public short cancel;
        
        public _DMSChartEvents_ChartSelectedEvent(short mouseFlags) {
            this.mouseFlags = mouseFlags;
        }
    }
    
    public delegate void _DMSChartEvents_OLEDragDropEventHandler(object sender, _DMSChartEvents_OLEDragDropEvent e);
    
    public class _DMSChartEvents_OLEDragDropEvent {
        
        public MSChart20Lib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public System.Single x;
        
        public System.Single y;
        
        public _DMSChartEvents_OLEDragDropEvent(MSChart20Lib.DataObject data, int effect, short button, short shift, System.Single x, System.Single y) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DMSChartEvents_OLEDragOverEventHandler(object sender, _DMSChartEvents_OLEDragOverEvent e);
    
    public class _DMSChartEvents_OLEDragOverEvent {
        
        public MSChart20Lib.DataObject data;
        
        public int effect;
        
        public short button;
        
        public short shift;
        
        public System.Single x;
        
        public System.Single y;
        
        public short state;
        
        public _DMSChartEvents_OLEDragOverEvent(MSChart20Lib.DataObject data, int effect, short button, short shift, System.Single x, System.Single y, short state) {
            this.data = data;
            this.effect = effect;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
            this.state = state;
        }
    }
    
    public delegate void _DMSChartEvents_OLECompleteDragEventHandler(object sender, _DMSChartEvents_OLECompleteDragEvent e);
    
    public class _DMSChartEvents_OLECompleteDragEvent {
        
        public int effect;
        
        public _DMSChartEvents_OLECompleteDragEvent(int effect) {
            this.effect = effect;
        }
    }
    
    public delegate void _DMSChartEvents_OLESetDataEventHandler(object sender, _DMSChartEvents_OLESetDataEvent e);
    
    public class _DMSChartEvents_OLESetDataEvent {
        
        public MSChart20Lib.DataObject data;
        
        public short dataFormat;
        
        public _DMSChartEvents_OLESetDataEvent(MSChart20Lib.DataObject data, short dataFormat) {
            this.data = data;
            this.dataFormat = dataFormat;
        }
    }
    
    public delegate void _DMSChartEvents_OLEGiveFeedbackEventHandler(object sender, _DMSChartEvents_OLEGiveFeedbackEvent e);
    
    public class _DMSChartEvents_OLEGiveFeedbackEvent {
        
        public int effect;
        
        public bool defaultCursors;
        
        public _DMSChartEvents_OLEGiveFeedbackEvent(int effect, bool defaultCursors) {
            this.effect = effect;
            this.defaultCursors = defaultCursors;
        }
    }
    
    public delegate void _DMSChartEvents_OLEStartDragEventHandler(object sender, _DMSChartEvents_OLEStartDragEvent e);
    
    public class _DMSChartEvents_OLEStartDragEvent {
        
        public MSChart20Lib.DataObject data;
        
        public int allowedEffects;
        
        public _DMSChartEvents_OLEStartDragEvent(MSChart20Lib.DataObject data, int allowedEffects) {
            this.data = data;
            this.allowedEffects = allowedEffects;
        }
    }
    
    public class AxMSChartEventMulticaster : MSChart20Lib._DMSChartEvents {
        
        private AxMSChart parent;
        
        public AxMSChartEventMulticaster(AxMSChart parent) {
            this.parent = parent;
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            _DMSChartEvents_MouseUpEvent mouseupEvent = new _DMSChartEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            _DMSChartEvents_MouseMoveEvent mousemoveEvent = new _DMSChartEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            _DMSChartEvents_MouseDownEvent mousedownEvent = new _DMSChartEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void KeyUp(ref short keyCode, short shift) {
            _DMSChartEvents_KeyUpEvent keyupEvent = new _DMSChartEvents_KeyUpEvent(keyCode, shift);
            this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
            keyCode = keyupEvent.keyCode;
        }
        
        public virtual void KeyPress(ref short keyAscii) {
            _DMSChartEvents_KeyPressEvent keypressEvent = new _DMSChartEvents_KeyPressEvent(keyAscii);
            this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
            keyAscii = keypressEvent.keyAscii;
        }
        
        public virtual void KeyDown(ref short keyCode, short shift) {
            _DMSChartEvents_KeyDownEvent keydownEvent = new _DMSChartEvents_KeyDownEvent(keyCode, shift);
            this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
            keyCode = keydownEvent.keyCode;
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
        
        public virtual void Click() {
            System.EventArgs clickEvent = new System.EventArgs();
            this.parent.RaiseOnClickEvent(this.parent, clickEvent);
        }
        
        public virtual void DonePainting() {
            System.EventArgs donepaintingEvent = new System.EventArgs();
            this.parent.RaiseOnDonePainting(this.parent, donepaintingEvent);
        }
        
        public virtual void DataUpdated(ref short row, ref short column, ref short labelRow, ref short labelColumn, ref short labelSetIndex, ref short updateFlags) {
            _DMSChartEvents_DataUpdatedEvent dataupdatedEvent = new _DMSChartEvents_DataUpdatedEvent(row, column, labelRow, labelColumn, labelSetIndex, updateFlags);
            this.parent.RaiseOnDataUpdated(this.parent, dataupdatedEvent);
            row = dataupdatedEvent.row;
            column = dataupdatedEvent.column;
            labelRow = dataupdatedEvent.labelRow;
            labelColumn = dataupdatedEvent.labelColumn;
            labelSetIndex = dataupdatedEvent.labelSetIndex;
            updateFlags = dataupdatedEvent.updateFlags;
        }
        
        public virtual void TitleUpdated(ref short updateFlags) {
            _DMSChartEvents_TitleUpdatedEvent titleupdatedEvent = new _DMSChartEvents_TitleUpdatedEvent(updateFlags);
            this.parent.RaiseOnTitleUpdated(this.parent, titleupdatedEvent);
            updateFlags = titleupdatedEvent.updateFlags;
        }
        
        public virtual void SeriesUpdated(ref short series, ref short updateFlags) {
            _DMSChartEvents_SeriesUpdatedEvent seriesupdatedEvent = new _DMSChartEvents_SeriesUpdatedEvent(series, updateFlags);
            this.parent.RaiseOnSeriesUpdated(this.parent, seriesupdatedEvent);
            series = seriesupdatedEvent.series;
            updateFlags = seriesupdatedEvent.updateFlags;
        }
        
        public virtual void PointLabelUpdated(ref short series, ref short dataPoint, ref short updateFlags) {
            _DMSChartEvents_PointLabelUpdatedEvent pointlabelupdatedEvent = new _DMSChartEvents_PointLabelUpdatedEvent(series, dataPoint, updateFlags);
            this.parent.RaiseOnPointLabelUpdated(this.parent, pointlabelupdatedEvent);
            series = pointlabelupdatedEvent.series;
            dataPoint = pointlabelupdatedEvent.dataPoint;
            updateFlags = pointlabelupdatedEvent.updateFlags;
        }
        
        public virtual void PointUpdated(ref short series, ref short dataPoint, ref short updateFlags) {
            _DMSChartEvents_PointUpdatedEvent pointupdatedEvent = new _DMSChartEvents_PointUpdatedEvent(series, dataPoint, updateFlags);
            this.parent.RaiseOnPointUpdated(this.parent, pointupdatedEvent);
            series = pointupdatedEvent.series;
            dataPoint = pointupdatedEvent.dataPoint;
            updateFlags = pointupdatedEvent.updateFlags;
        }
        
        public virtual void PlotUpdated(ref short updateFlags) {
            _DMSChartEvents_PlotUpdatedEvent plotupdatedEvent = new _DMSChartEvents_PlotUpdatedEvent(updateFlags);
            this.parent.RaiseOnPlotUpdated(this.parent, plotupdatedEvent);
            updateFlags = plotupdatedEvent.updateFlags;
        }
        
        public virtual void LegendUpdated(ref short updateFlags) {
            _DMSChartEvents_LegendUpdatedEvent legendupdatedEvent = new _DMSChartEvents_LegendUpdatedEvent(updateFlags);
            this.parent.RaiseOnLegendUpdated(this.parent, legendupdatedEvent);
            updateFlags = legendupdatedEvent.updateFlags;
        }
        
        public virtual void FootnoteUpdated(ref short updateFlags) {
            _DMSChartEvents_FootnoteUpdatedEvent footnoteupdatedEvent = new _DMSChartEvents_FootnoteUpdatedEvent(updateFlags);
            this.parent.RaiseOnFootnoteUpdated(this.parent, footnoteupdatedEvent);
            updateFlags = footnoteupdatedEvent.updateFlags;
        }
        
        public virtual void ChartUpdated(ref short updateFlags) {
            _DMSChartEvents_ChartUpdatedEvent chartupdatedEvent = new _DMSChartEvents_ChartUpdatedEvent(updateFlags);
            this.parent.RaiseOnChartUpdated(this.parent, chartupdatedEvent);
            updateFlags = chartupdatedEvent.updateFlags;
        }
        
        public virtual void AxisTitleUpdated(ref short axisID, ref short axisIndex, ref short updateFlags) {
            _DMSChartEvents_AxisTitleUpdatedEvent axistitleupdatedEvent = new _DMSChartEvents_AxisTitleUpdatedEvent(axisID, axisIndex, updateFlags);
            this.parent.RaiseOnAxisTitleUpdated(this.parent, axistitleupdatedEvent);
            axisID = axistitleupdatedEvent.axisID;
            axisIndex = axistitleupdatedEvent.axisIndex;
            updateFlags = axistitleupdatedEvent.updateFlags;
        }
        
        public virtual void AxisLabelUpdated(ref short axisID, ref short axisIndex, ref short labelSetIndex, ref short labelIndex, ref short updateFlags) {
            _DMSChartEvents_AxisLabelUpdatedEvent axislabelupdatedEvent = new _DMSChartEvents_AxisLabelUpdatedEvent(axisID, axisIndex, labelSetIndex, labelIndex, updateFlags);
            this.parent.RaiseOnAxisLabelUpdated(this.parent, axislabelupdatedEvent);
            axisID = axislabelupdatedEvent.axisID;
            axisIndex = axislabelupdatedEvent.axisIndex;
            labelSetIndex = axislabelupdatedEvent.labelSetIndex;
            labelIndex = axislabelupdatedEvent.labelIndex;
            updateFlags = axislabelupdatedEvent.updateFlags;
        }
        
        public virtual void AxisUpdated(ref short axisID, ref short axisIndex, ref short updateFlags) {
            _DMSChartEvents_AxisUpdatedEvent axisupdatedEvent = new _DMSChartEvents_AxisUpdatedEvent(axisID, axisIndex, updateFlags);
            this.parent.RaiseOnAxisUpdated(this.parent, axisupdatedEvent);
            axisID = axisupdatedEvent.axisID;
            axisIndex = axisupdatedEvent.axisIndex;
            updateFlags = axisupdatedEvent.updateFlags;
        }
        
        public virtual void SeriesActivated(ref short series, ref short mouseFlags, out short cancel) {
            _DMSChartEvents_SeriesActivatedEvent seriesactivatedEvent = new _DMSChartEvents_SeriesActivatedEvent(series, mouseFlags);
            this.parent.RaiseOnSeriesActivated(this.parent, seriesactivatedEvent);
            series = seriesactivatedEvent.series;
            mouseFlags = seriesactivatedEvent.mouseFlags;
            cancel = seriesactivatedEvent.cancel;
        }
        
        public virtual void PointLabelActivated(ref short series, ref short dataPoint, ref short mouseFlags, out short cancel) {
            _DMSChartEvents_PointLabelActivatedEvent pointlabelactivatedEvent = new _DMSChartEvents_PointLabelActivatedEvent(series, dataPoint, mouseFlags);
            this.parent.RaiseOnPointLabelActivated(this.parent, pointlabelactivatedEvent);
            series = pointlabelactivatedEvent.series;
            dataPoint = pointlabelactivatedEvent.dataPoint;
            mouseFlags = pointlabelactivatedEvent.mouseFlags;
            cancel = pointlabelactivatedEvent.cancel;
        }
        
        public virtual void PointActivated(ref short series, ref short dataPoint, ref short mouseFlags, out short cancel) {
            _DMSChartEvents_PointActivatedEvent pointactivatedEvent = new _DMSChartEvents_PointActivatedEvent(series, dataPoint, mouseFlags);
            this.parent.RaiseOnPointActivated(this.parent, pointactivatedEvent);
            series = pointactivatedEvent.series;
            dataPoint = pointactivatedEvent.dataPoint;
            mouseFlags = pointactivatedEvent.mouseFlags;
            cancel = pointactivatedEvent.cancel;
        }
        
        public virtual void AxisTitleActivated(ref short axisID, ref short axisIndex, ref short mouseFlags, out short cancel) {
            _DMSChartEvents_AxisTitleActivatedEvent axistitleactivatedEvent = new _DMSChartEvents_AxisTitleActivatedEvent(axisID, axisIndex, mouseFlags);
            this.parent.RaiseOnAxisTitleActivated(this.parent, axistitleactivatedEvent);
            axisID = axistitleactivatedEvent.axisID;
            axisIndex = axistitleactivatedEvent.axisIndex;
            mouseFlags = axistitleactivatedEvent.mouseFlags;
            cancel = axistitleactivatedEvent.cancel;
        }
        
        public virtual void AxisLabelActivated(ref short axisID, ref short axisIndex, ref short labelSetIndex, ref short labelIndex, ref short mouseFlags, out short cancel) {
            _DMSChartEvents_AxisLabelActivatedEvent axislabelactivatedEvent = new _DMSChartEvents_AxisLabelActivatedEvent(axisID, axisIndex, labelSetIndex, labelIndex, mouseFlags);
            this.parent.RaiseOnAxisLabelActivated(this.parent, axislabelactivatedEvent);
            axisID = axislabelactivatedEvent.axisID;
            axisIndex = axislabelactivatedEvent.axisIndex;
            labelSetIndex = axislabelactivatedEvent.labelSetIndex;
            labelIndex = axislabelactivatedEvent.labelIndex;
            mouseFlags = axislabelactivatedEvent.mouseFlags;
            cancel = axislabelactivatedEvent.cancel;
        }
        
        public virtual void AxisActivated(ref short axisID, ref short axisIndex, ref short mouseFlags, out short cancel) {
            _DMSChartEvents_AxisActivatedEvent axisactivatedEvent = new _DMSChartEvents_AxisActivatedEvent(axisID, axisIndex, mouseFlags);
            this.parent.RaiseOnAxisActivated(this.parent, axisactivatedEvent);
            axisID = axisactivatedEvent.axisID;
            axisIndex = axisactivatedEvent.axisIndex;
            mouseFlags = axisactivatedEvent.mouseFlags;
            cancel = axisactivatedEvent.cancel;
        }
        
        public virtual void PlotActivated(ref short mouseFlags, out short cancel) {
            _DMSChartEvents_PlotActivatedEvent plotactivatedEvent = new _DMSChartEvents_PlotActivatedEvent(mouseFlags);
            this.parent.RaiseOnPlotActivated(this.parent, plotactivatedEvent);
            mouseFlags = plotactivatedEvent.mouseFlags;
            cancel = plotactivatedEvent.cancel;
        }
        
        public virtual void LegendActivated(ref short mouseFlags, out short cancel) {
            _DMSChartEvents_LegendActivatedEvent legendactivatedEvent = new _DMSChartEvents_LegendActivatedEvent(mouseFlags);
            this.parent.RaiseOnLegendActivated(this.parent, legendactivatedEvent);
            mouseFlags = legendactivatedEvent.mouseFlags;
            cancel = legendactivatedEvent.cancel;
        }
        
        public virtual void FootnoteActivated(ref short mouseFlags, out short cancel) {
            _DMSChartEvents_FootnoteActivatedEvent footnoteactivatedEvent = new _DMSChartEvents_FootnoteActivatedEvent(mouseFlags);
            this.parent.RaiseOnFootnoteActivated(this.parent, footnoteactivatedEvent);
            mouseFlags = footnoteactivatedEvent.mouseFlags;
            cancel = footnoteactivatedEvent.cancel;
        }
        
        public virtual void TitleActivated(ref short mouseFlags, out short cancel) {
            _DMSChartEvents_TitleActivatedEvent titleactivatedEvent = new _DMSChartEvents_TitleActivatedEvent(mouseFlags);
            this.parent.RaiseOnTitleActivated(this.parent, titleactivatedEvent);
            mouseFlags = titleactivatedEvent.mouseFlags;
            cancel = titleactivatedEvent.cancel;
        }
        
        public virtual void ChartActivated(ref short mouseFlags, out short cancel) {
            _DMSChartEvents_ChartActivatedEvent chartactivatedEvent = new _DMSChartEvents_ChartActivatedEvent(mouseFlags);
            this.parent.RaiseOnChartActivated(this.parent, chartactivatedEvent);
            mouseFlags = chartactivatedEvent.mouseFlags;
            cancel = chartactivatedEvent.cancel;
        }
        
        public virtual void SeriesSelected(ref short series, ref short mouseFlags, out short cancel) {
            _DMSChartEvents_SeriesSelectedEvent seriesselectedEvent = new _DMSChartEvents_SeriesSelectedEvent(series, mouseFlags);
            this.parent.RaiseOnSeriesSelected(this.parent, seriesselectedEvent);
            series = seriesselectedEvent.series;
            mouseFlags = seriesselectedEvent.mouseFlags;
            cancel = seriesselectedEvent.cancel;
        }
        
        public virtual void PointLabelSelected(ref short series, ref short dataPoint, ref short mouseFlags, out short cancel) {
            _DMSChartEvents_PointLabelSelectedEvent pointlabelselectedEvent = new _DMSChartEvents_PointLabelSelectedEvent(series, dataPoint, mouseFlags);
            this.parent.RaiseOnPointLabelSelected(this.parent, pointlabelselectedEvent);
            series = pointlabelselectedEvent.series;
            dataPoint = pointlabelselectedEvent.dataPoint;
            mouseFlags = pointlabelselectedEvent.mouseFlags;
            cancel = pointlabelselectedEvent.cancel;
        }
        
        public virtual void PointSelected(ref short series, ref short dataPoint, ref short mouseFlags, out short cancel) {
            _DMSChartEvents_PointSelectedEvent pointselectedEvent = new _DMSChartEvents_PointSelectedEvent(series, dataPoint, mouseFlags);
            this.parent.RaiseOnPointSelected(this.parent, pointselectedEvent);
            series = pointselectedEvent.series;
            dataPoint = pointselectedEvent.dataPoint;
            mouseFlags = pointselectedEvent.mouseFlags;
            cancel = pointselectedEvent.cancel;
        }
        
        public virtual void AxisTitleSelected(ref short axisID, ref short axisIndex, ref short mouseFlags, out short cancel) {
            _DMSChartEvents_AxisTitleSelectedEvent axistitleselectedEvent = new _DMSChartEvents_AxisTitleSelectedEvent(axisID, axisIndex, mouseFlags);
            this.parent.RaiseOnAxisTitleSelected(this.parent, axistitleselectedEvent);
            axisID = axistitleselectedEvent.axisID;
            axisIndex = axistitleselectedEvent.axisIndex;
            mouseFlags = axistitleselectedEvent.mouseFlags;
            cancel = axistitleselectedEvent.cancel;
        }
        
        public virtual void AxisLabelSelected(ref short axisID, ref short axisIndex, ref short labelSetIndex, ref short labelIndex, ref short mouseFlags, out short cancel) {
            _DMSChartEvents_AxisLabelSelectedEvent axislabelselectedEvent = new _DMSChartEvents_AxisLabelSelectedEvent(axisID, axisIndex, labelSetIndex, labelIndex, mouseFlags);
            this.parent.RaiseOnAxisLabelSelected(this.parent, axislabelselectedEvent);
            axisID = axislabelselectedEvent.axisID;
            axisIndex = axislabelselectedEvent.axisIndex;
            labelSetIndex = axislabelselectedEvent.labelSetIndex;
            labelIndex = axislabelselectedEvent.labelIndex;
            mouseFlags = axislabelselectedEvent.mouseFlags;
            cancel = axislabelselectedEvent.cancel;
        }
        
        public virtual void AxisSelected(ref short axisID, ref short axisIndex, ref short mouseFlags, out short cancel) {
            _DMSChartEvents_AxisSelectedEvent axisselectedEvent = new _DMSChartEvents_AxisSelectedEvent(axisID, axisIndex, mouseFlags);
            this.parent.RaiseOnAxisSelected(this.parent, axisselectedEvent);
            axisID = axisselectedEvent.axisID;
            axisIndex = axisselectedEvent.axisIndex;
            mouseFlags = axisselectedEvent.mouseFlags;
            cancel = axisselectedEvent.cancel;
        }
        
        public virtual void PlotSelected(ref short mouseFlags, out short cancel) {
            _DMSChartEvents_PlotSelectedEvent plotselectedEvent = new _DMSChartEvents_PlotSelectedEvent(mouseFlags);
            this.parent.RaiseOnPlotSelected(this.parent, plotselectedEvent);
            mouseFlags = plotselectedEvent.mouseFlags;
            cancel = plotselectedEvent.cancel;
        }
        
        public virtual void LegendSelected(ref short mouseFlags, out short cancel) {
            _DMSChartEvents_LegendSelectedEvent legendselectedEvent = new _DMSChartEvents_LegendSelectedEvent(mouseFlags);
            this.parent.RaiseOnLegendSelected(this.parent, legendselectedEvent);
            mouseFlags = legendselectedEvent.mouseFlags;
            cancel = legendselectedEvent.cancel;
        }
        
        public virtual void FootnoteSelected(ref short mouseFlags, out short cancel) {
            _DMSChartEvents_FootnoteSelectedEvent footnoteselectedEvent = new _DMSChartEvents_FootnoteSelectedEvent(mouseFlags);
            this.parent.RaiseOnFootnoteSelected(this.parent, footnoteselectedEvent);
            mouseFlags = footnoteselectedEvent.mouseFlags;
            cancel = footnoteselectedEvent.cancel;
        }
        
        public virtual void TitleSelected(ref short mouseFlags, out short cancel) {
            _DMSChartEvents_TitleSelectedEvent titleselectedEvent = new _DMSChartEvents_TitleSelectedEvent(mouseFlags);
            this.parent.RaiseOnTitleSelected(this.parent, titleselectedEvent);
            mouseFlags = titleselectedEvent.mouseFlags;
            cancel = titleselectedEvent.cancel;
        }
        
        public virtual void ChartSelected(ref short mouseFlags, out short cancel) {
            _DMSChartEvents_ChartSelectedEvent chartselectedEvent = new _DMSChartEvents_ChartSelectedEvent(mouseFlags);
            this.parent.RaiseOnChartSelected(this.parent, chartselectedEvent);
            mouseFlags = chartselectedEvent.mouseFlags;
            cancel = chartselectedEvent.cancel;
        }
        
        public virtual void OLEDragDrop(ref MSChart20Lib.DataObject data, ref int effect, ref short button, ref short shift, ref System.Single x, ref System.Single y) {
            _DMSChartEvents_OLEDragDropEvent oledragdropEvent = new _DMSChartEvents_OLEDragDropEvent(data, effect, button, shift, x, y);
            this.parent.RaiseOnOLEDragDrop(this.parent, oledragdropEvent);
            data = oledragdropEvent.data;
            effect = oledragdropEvent.effect;
            button = oledragdropEvent.button;
            shift = oledragdropEvent.shift;
            x = oledragdropEvent.x;
            y = oledragdropEvent.y;
        }
        
        public virtual void OLEDragOver(ref MSChart20Lib.DataObject data, ref int effect, ref short button, ref short shift, ref System.Single x, ref System.Single y, ref short state) {
            _DMSChartEvents_OLEDragOverEvent oledragoverEvent = new _DMSChartEvents_OLEDragOverEvent(data, effect, button, shift, x, y, state);
            this.parent.RaiseOnOLEDragOver(this.parent, oledragoverEvent);
            data = oledragoverEvent.data;
            effect = oledragoverEvent.effect;
            button = oledragoverEvent.button;
            shift = oledragoverEvent.shift;
            x = oledragoverEvent.x;
            y = oledragoverEvent.y;
            state = oledragoverEvent.state;
        }
        
        public virtual void OLECompleteDrag(ref int effect) {
            _DMSChartEvents_OLECompleteDragEvent olecompletedragEvent = new _DMSChartEvents_OLECompleteDragEvent(effect);
            this.parent.RaiseOnOLECompleteDrag(this.parent, olecompletedragEvent);
            effect = olecompletedragEvent.effect;
        }
        
        public virtual void OLESetData(ref MSChart20Lib.DataObject data, ref short dataFormat) {
            _DMSChartEvents_OLESetDataEvent olesetdataEvent = new _DMSChartEvents_OLESetDataEvent(data, dataFormat);
            this.parent.RaiseOnOLESetData(this.parent, olesetdataEvent);
            data = olesetdataEvent.data;
            dataFormat = olesetdataEvent.dataFormat;
        }
        
        public virtual void OLEGiveFeedback(ref int effect, ref bool defaultCursors) {
            _DMSChartEvents_OLEGiveFeedbackEvent olegivefeedbackEvent = new _DMSChartEvents_OLEGiveFeedbackEvent(effect, defaultCursors);
            this.parent.RaiseOnOLEGiveFeedback(this.parent, olegivefeedbackEvent);
            effect = olegivefeedbackEvent.effect;
            defaultCursors = olegivefeedbackEvent.defaultCursors;
        }
        
        public virtual void OLEStartDrag(ref MSChart20Lib.DataObject data, ref int allowedEffects) {
            _DMSChartEvents_OLEStartDragEvent olestartdragEvent = new _DMSChartEvents_OLEStartDragEvent(data, allowedEffects);
            this.parent.RaiseOnOLEStartDrag(this.parent, olestartdragEvent);
            data = olestartdragEvent.data;
            allowedEffects = olestartdragEvent.allowedEffects;
        }
    }
}
